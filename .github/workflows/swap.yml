import 'dotenv/config';
import fetch from 'node-fetch';
import { mnemonicToPrivateKey } from '@ton/crypto';
import { TonClient, WalletContractV4, internal } from '@ton/ton';

const {
  TONCENTER_API_KEY,
  WALLET_ADDRESS,
  WALLET_MNEMONIC,
  WALLET_PRIVATE_KEY,
  CDT_CONTRACT,
  FIXED_RATE
} = process.env;

if (!TONCENTER_API_KEY || !WALLET_ADDRESS || (!WALLET_MNEMONIC && !WALLET_PRIVATE_KEY) || !CDT_CONTRACT) {
  console.error('Missing environment variables. Set TONCENTER_API_KEY, WALLET_ADDRESS, WALLET_MNEMONIC (or WALLET_PRIVATE_KEY), CDT_CONTRACT.');
  process.exit(1);
}

(async () => {
  try {
    console.log('🔹 Connecting to TON center API...');
    const client = new TonClient({
      endpoint: 'https://toncenter.com/api/v2/jsonRPC',
      apiKey: TONCENTER_API_KEY
    });

    console.log(`🔹 Wallet Address: ${WALLET_ADDRESS}`);
    console.log(`🔹 CDT Contract: ${CDT_CONTRACT}`);
    console.log(`🔹 Fixed Rate: ${FIXED_RATE}`);

    let keyPair;
    if (WALLET_MNEMONIC) {
      console.log('🔹 Importing wallet from mnemonic...');
      keyPair = await mnemonicToPrivateKey(WALLET_MNEMONIC.split(' '));
    } else {
      console.log('🔹 Using provided private key...');
      keyPair = { secretKey: Buffer.from(WALLET_PRIVATE_KEY, 'hex') };
    }

    const wallet = WalletContractV4.create({
      workchain: 0,
      publicKey: keyPair.publicKey
    });

    console.log('🔹 Getting wallet balance...');
    const balance = await client.getBalance(wallet.address);
    console.log(`💰 Wallet Balance: ${balance / 1e9} TON`);

    console.log('🔹 Fetching incoming transactions...');
    const tx = await client.getTransactions(WALLET_ADDRESS, { limit: 1 });
    console.log('📜 Latest Transaction:', tx);

    if (tx.length === 0) {
      console.log('⚠️ No transactions found.');
      return;
    }

    const lastTx = tx[0];
    if (!lastTx.in_msg || !lastTx.in_msg.value) {
      console.log('⚠️ No TON received in last transaction.');
      return;
    }

    const tonAmount = parseInt(lastTx.in_msg.value) / 1e9;
    console.log(`💎 Received TON: ${tonAmount}`);

    const cdtAmount = tonAmount * parseFloat(FIXED_RATE);
    console.log(`🔄 Will send CDT amount: ${cdtAmount}`);

    console.log('🔹 Sending CDT...');
    await client.sendExternalMessage(wallet, wallet.createTransfer({
      secretKey: keyPair.secretKey,
      toAddress: CDT_CONTRACT,
      amount: BigInt(Math.floor(cdtAmount * 1e9)),
      seqno: await wallet.getSeqno(client),
      sendMode: 3
    }));

    console.log('✅ Swap completed successfully.');

  } catch (err) {
    console.error('❌ Error during swap process:', err);
    process.exit(1);
  }
})();
